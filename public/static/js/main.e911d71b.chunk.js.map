{"version":3,"sources":["components/NewEntryForm.js","components/NewEntry.js","components/UpdateEntryForm.js","components/UpdateEntry.js","components/Dictionary.js","App.js","serviceWorker.js","index.js"],"names":["NewEntryForm","props","handleChange","target","setState","name","value","handleSubmit","event","preventDefault","fetch","process","method","headers","body","JSON","stringify","state","then","refresh","definition","archived","onSubmit","this","className","type","placeholder","onChange","required","Button","variant","onClick","Component","NewEntryModal","Modal","aria-labelledby","centered","Header","closeButton","Body","NewEntry","React","useState","modalShow","setModalShow","show","onHide","UpdateEntryForm","checked","entry","_id","htmlFor","UpdateEntryModal","UpdateEntry","entries","archivist","response","json","handleDelete","handleViewAll","handleViewArchived","handleViewCurrent","displayEntries","map","toString","key","bind","ButtonGroup","aria-label","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e911d71b.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL\r\n\r\nexport default class NewEntryForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            name: '',\r\n            definition: '',\r\n            archived: false\r\n        }\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ [target.name]: target.value })\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault()\r\n\r\n        fetch(`${API_URL}dictionary`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(this.state)\r\n        })\r\n            .then(this.props.refresh)\r\n            .then(() => this.setState({\r\n                name: '',\r\n                definition: '',\r\n                archived: false\r\n            }))\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className='input-form'>\r\n                {'>'}<input name='name'\r\n                    value={this.state.name}\r\n                    type='text'\r\n                    placeholder='Input Word or Phrase'\r\n                    onChange={this.handleChange}\r\n                    required\r\n                />\r\n\r\n                {' >'}<input name='definition'\r\n                    value={this.state.definition}\r\n                    type='text'\r\n                    placeholder='Input Definition'\r\n                    onChange={this.handleChange}\r\n                    required\r\n                />\r\n\r\n                {' '}<Button variant=\"outline-success\" onClick={this.handleSubmit}>\r\n                    Post Entry\r\n                </Button>\r\n            </form>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport NewEntryForm from './NewEntryForm'\r\n\r\nfunction NewEntryModal(props) {\r\n  return (\r\n    <Modal className='addmodal'\r\n      {...props}\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header className='input-form' closeButton>\r\n        New Entry\r\n          </Modal.Header>\r\n\r\n      <Modal.Body>\r\n        <NewEntryForm />\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default function NewEntry({ refresh }) {\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Button variant=\"outline-success\" \r\n        onClick={() => {\r\n        setModalShow(true)\r\n      }}>\r\n        Add a New Entry\r\n      </Button>\r\n\r\n      <NewEntryModal\r\n        show={modalShow}\r\n        onHide={() => {\r\n          setModalShow(false)\r\n          refresh()\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}","import React, { Component } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL\r\n\r\nexport default class UpdateEntryForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            name: props.entry.name,\r\n            definition: props.entry.definition,\r\n            archived: props.entry.archived\r\n        }\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        let value = target.type === 'checkbox' ? target.checked : target.value\r\n        this.setState({ [target.name]: value })\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault()\r\n\r\n        fetch(`${API_URL}dictionary/${this.props.entry._id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(this.state)\r\n        })\r\n            .then(this.props.refresh)\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className='input-form'>\r\n                {'>'}<input name='name'\r\n                    value={this.state.name}\r\n                    type='text'\r\n                    placeholder='Input New Word or Phrase'\r\n                    onChange={this.handleChange}\r\n                    required\r\n                />\r\n\r\n                {' >'}<input name='definition'\r\n                    value={this.state.definition}\r\n                    type='text'\r\n                    placeholder='Input New Definition'\r\n                    onChange={this.handleChange}\r\n                    required\r\n                />\r\n\r\n                {' '}<span>\r\n                    <label htmlFor='archived'>Archived?</label>\r\n                    <input name='archived'\r\n                    checked={this.state.archived}\r\n                    type='checkbox'\r\n                    onChange={this.handleChange} />\r\n                </span>\r\n\r\n                {' '}<Button variant=\"outline-success\" onClick={this.handleSubmit}>\r\n                    Update Entry\r\n                </Button>\r\n            </form>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport UpdateEntryForm from './UpdateEntryForm'\r\n\r\nfunction UpdateEntryModal(props) {\r\n  return (\r\n    <Modal className='addmodal'\r\n      {...props}\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header className='input-form' closeButton>\r\n        Update Entry\r\n      </Modal.Header>\r\n\r\n      <Modal.Body>\r\n        <UpdateEntryForm entry={props.entry} />\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default function UpdateEntry({ refresh, entry }) {\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Button variant=\"outline-success\" \r\n        onClick={() => {\r\n        setModalShow(true)\r\n      }}>\r\n        Edit\r\n      </Button>\r\n\r\n      <UpdateEntryModal\r\n        show={modalShow}\r\n        onHide={() => {\r\n          setModalShow(false)\r\n          refresh()\r\n        }}\r\n        entry={entry}\r\n      />\r\n    </>\r\n  );\r\n}","import React, { Component } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\r\nimport NewEntry from './NewEntry'\r\nimport UpdateEntry from './UpdateEntry'\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL\r\n\r\nexport default class extends Component {\r\n\r\n    state = { entries: [], archivist: 'false' }\r\n\r\n    refresh = () => {\r\n        fetch(`${API_URL}dictionary`)\r\n            .then(response => response.json())\r\n            .then(entries => this.setState({ entries }))\r\n    }\r\n\r\n    handleDelete = (entry) => {\r\n        fetch(`${API_URL}dictionary/${entry._id}`, {\r\n            method: 'DELETE'\r\n        })\r\n            .then(this.refresh)\r\n    }\r\n\r\n    handleViewAll = (event) => {\r\n        event.preventDefault()\r\n        this.setState({ archivist: 'all' })\r\n        this.refresh()\r\n    }\r\n    handleViewArchived = (event) => {\r\n        event.preventDefault()\r\n        this.setState({ archivist: 'true' })\r\n        this.refresh()\r\n    }\r\n    handleViewCurrent = (event) => {\r\n        event.preventDefault()\r\n        this.setState({ archivist: 'false' })\r\n        this.refresh()\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh()\r\n    }\r\n\r\n    render() {\r\n\r\n        const displayEntries = this.state.entries.map(\r\n            entry => {\r\n                if (this.state.archivist === 'all' || this.state.archivist === entry.archived.toString())\r\n                {\r\n                    return(<div key={entry._id}>\r\n                    <span>{`>${entry.name}: ${entry.definition}`} </span>\r\n                    <UpdateEntry refresh={this.refresh} entry={entry} />\r\n                    <Button variant='outline-success' onClick={this.handleDelete.bind(this, entry)}>x</Button>\r\n                    </div>)\r\n                }\r\n            })\r\n\r\n        return (\r\n            <div>\r\n                <h1>Coding Dictionary</h1>\r\n                <NewEntry refresh={this.refresh} />\r\n                <ButtonGroup aria-label=\"archiveView\" className=\"archivist\">\r\n                    <Button variant=\"outline-success\" onClick={this.handleViewAll}>All</Button>\r\n                    <Button variant=\"outline-success\" onClick={this.handleViewCurrent}>Current</Button>\r\n                    <Button variant=\"outline-success\" onClick={this.handleViewArchived}>Archived</Button>\r\n                </ButtonGroup>\r\n                {displayEntries}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport Dictionary from './components/Dictionary'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dictionary />    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}